{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nexport const useObserver = (ref, canLoad, isLoading, callback) => {\n  _s();\n\n  const observer = useRef();\n  useEffect(() => {\n    if (isLoading) return;\n    if (observer.current) observer.current.disconnect();\n\n    var cb = function (entries, observer) {\n      if (entries[0].isIntersecting && canLoad) {\n        window.addEventListener('popstate', event => {\n          if (event.state && page < totalPages) {\n            return;\n          }\n        }, false);\n        callback();\n      }\n    };\n\n    observer.current = new IntersectionObserver(cb);\n    observer.current.observe(ref.current);\n  }, [isLoading]);\n};\n\n_s(useObserver, \"mvUvGhiqkPzCYiMPAW/Py9ym/ZY=\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/IT/myProjects/filmpro/src/hooks/useObserver.js"],"names":["useEffect","useRef","useObserver","ref","canLoad","isLoading","callback","observer","current","disconnect","cb","entries","isIntersecting","window","addEventListener","event","state","page","totalPages","IntersectionObserver","observe"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAGA,OAAO,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAeC,SAAf,EAA0BC,QAA1B,KAAuC;AAAA;;AAC9D,QAAMC,QAAQ,GAAGN,MAAM,EAAvB;AAEAD,EAAAA,SAAS,CAAE,MAAM;AACb,QAAGK,SAAH,EAAc;AACd,QAAGE,QAAQ,CAACC,OAAZ,EAAqBD,QAAQ,CAACC,OAAT,CAAiBC,UAAjB;;AACrB,QAAIC,EAAE,GAAG,UAASC,OAAT,EAAkBJ,QAAlB,EAA4B;AACnC,UAAGI,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,IAA6BR,OAAhC,EAAyC;AACvCS,QAAAA,MAAM,CAACC,gBAAP,CAAwB,UAAxB,EAAqCC,KAAD,IAAW;AAC7C,cAAIA,KAAK,CAACC,KAAN,IAAeC,IAAI,GAAGC,UAA1B,EAAsC;AACpC;AACD;AACD,SAJF,EAII,KAJJ;AAKAZ,QAAAA,QAAQ;AACT;AAEF,KAVD;;AAWAC,IAAAA,QAAQ,CAACC,OAAT,GAAmB,IAAIW,oBAAJ,CAAyBT,EAAzB,CAAnB;AACAH,IAAAA,QAAQ,CAACC,OAAT,CAAiBY,OAAjB,CAAyBjB,GAAG,CAACK,OAA7B;AACC,GAhBI,EAgBF,CAACH,SAAD,CAhBE,CAAT;AAiBH,CApBM;;GAAMH,W","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n\r\nexport const useObserver = (ref, canLoad, isLoading, callback) => {\r\n    const observer = useRef();\r\n\r\n    useEffect (() => {\r\n        if(isLoading) return\r\n        if(observer.current) observer.current.disconnect();\r\n        var cb = function(entries, observer) {\r\n          if(entries[0].isIntersecting && canLoad) {\r\n            window.addEventListener('popstate', (event) => {\r\n              if (event.state && page < totalPages) {\r\n                return\r\n              }\r\n             }, false);\r\n            callback()\r\n          }\r\n          \r\n        };\r\n        observer.current = new IntersectionObserver(cb);\r\n        observer.current.observe(ref.current)\r\n        }, [isLoading])\r\n}"]},"metadata":{},"sourceType":"module"}