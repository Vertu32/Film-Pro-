{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\IT\\\\myProjects\\\\filmpro\\\\src\\\\pages\\\\MainPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Input, InputAdornment, InputBase, InputLabel } from '@mui/material';\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BrowserRouter, Router } from 'react-router-dom';\nimport PostService from '../api/PostService';\nimport FilmList, { MemoFilmList } from '../components/FilmsList';\nimport Header from '../components/Header';\nimport Search from '../components/Search';\nimport { ArrContext, PageContext } from '../context';\nimport { useFetching } from '../hooks/useFetching';\nimport { useObserver } from '../hooks/useObserver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainPage() {\n  _s();\n\n  const {\n    films,\n    setFilms\n  } = useContext(ArrContext);\n  const {\n    page,\n    setPage\n  } = useContext(PageContext);\n  const [totalPages, setTotalPages] = useState(10);\n  const [search, setSearch] = useState();\n  const [filter, setFilter] = useState('');\n  const lastElement = useRef();\n  const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\n    if (page < totalPages) {\n      const posts = await PostService.getAll(page);\n      setFilms([...films, ...posts]);\n    }\n  });\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n  useEffect(() => {\n    window.addEventListener('popstate', event => {\n      if (event.state && page < totalPages) {\n        setPage(prevValue => prevValue + 1);\n      }\n    }, false);\n    window.history.pushState({\n      name: \"browserBack\"\n    }, \"on browser back click\", window.location.href);\n  }, []);\n  useObserver(lastElement, page < totalPages, isPostsLoading, () => {\n    if (films.length) {\n      setPage(page + 1);\n    }\n\n    ;\n  });\n  const searchedFilms = useMemo(() => {\n    let noCopyArr = [];\n    return [...films].filter(film => {\n      if (film.nameRu) {\n        return film.nameRu.toLowerCase().includes(filter);\n      }\n    });\n  }, [filter, films]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"films__container\",\n      children: searchedFilms.length ? searchedFilms.map((film, index) => /*#__PURE__*/_jsxDEV(MemoFilmList, {\n        id: film.kinopoiskId,\n        image: film.posterUrl,\n        name: film.nameRu,\n        countries: film['countries'][0],\n        year: film.year\n      }, film.kinopoiskId + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"failed__search\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0424\\u0438\\u043B\\u044C\\u043C\\u044B \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lastElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MainPage, \"B1rPwQAxGgcSg3R16rI3h17Dumg=\", false, function () {\n  return [useFetching, useObserver];\n});\n\n_c = MainPage;\nexport const MemoMainPage = /*#__PURE__*/React.memo(MainPage);\n_c2 = MemoMainPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MainPage\");\n$RefreshReg$(_c2, \"MemoMainPage\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/IT/myProjects/filmpro/src/pages/MainPage.jsx"],"names":["Button","Input","InputAdornment","InputBase","InputLabel","React","useContext","useEffect","useMemo","useRef","useState","BrowserRouter","Router","PostService","FilmList","MemoFilmList","Header","Search","ArrContext","PageContext","useFetching","useObserver","MainPage","films","setFilms","page","setPage","totalPages","setTotalPages","search","setSearch","filter","setFilter","lastElement","fetchPosts","isPostsLoading","postError","posts","getAll","window","addEventListener","event","state","prevValue","history","pushState","name","location","href","length","searchedFilms","noCopyArr","film","nameRu","toLowerCase","includes","map","index","kinopoiskId","posterUrl","year","MemoMainPage","memo"],"mappings":"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","sourcesContent":["import { Button, Input, InputAdornment, InputBase, InputLabel } from '@mui/material';\r\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { BrowserRouter, Router } from 'react-router-dom';\r\nimport PostService from '../api/PostService';\r\nimport FilmList, { MemoFilmList } from '../components/FilmsList';\r\nimport Header from '../components/Header';\r\nimport Search from '../components/Search';\r\nimport { ArrContext, PageContext } from '../context';\r\nimport { useFetching } from '../hooks/useFetching';\r\nimport {useObserver} from '../hooks/useObserver'\r\n\r\n\r\nfunction MainPage() {\r\n\r\n    const {films, setFilms} = useContext(ArrContext)\r\n    const {page, setPage} = useContext(PageContext)\r\n    const [totalPages, setTotalPages] = useState(10)\r\n    const [search, setSearch] = useState()\r\n    const [filter,setFilter] = useState('')\r\n  \r\n  \r\n    const lastElement = useRef()\r\n  \r\n  \r\n    \r\n    const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\r\n      if(page<totalPages) {\r\n        const posts = await PostService.getAll(page);\r\n          \r\n            setFilms([...films, ...posts])\r\n      }\r\n        \r\n  \r\n    })\r\n  \r\n  \r\n    useEffect(() => {\r\n      \r\n      fetchPosts();\r\n      }, [page])\r\n     \r\n    useEffect(()=> {\r\n      window.addEventListener('popstate', (event) => {\r\n        if (event.state && page < totalPages) {\r\n          setPage(prevValue => prevValue+1)\r\n        }\r\n       }, false);\r\n      window.history.pushState({name: \"browserBack\"}, \"on browser back click\", window.location.href);\r\n    }, [])\r\n  \r\n\r\n    useObserver(lastElement, page < totalPages, isPostsLoading, () => {\r\n      if(films.length) {setPage(page+1)};\r\n    })\r\n  \r\n      const searchedFilms = useMemo(() => {\r\n        let noCopyArr = []\r\n         \r\n        return [...films].filter(film => {\r\n          if(film.nameRu) {\r\n            return film.nameRu.toLowerCase().includes(filter)\r\n          }\r\n        })\r\n  \r\n      }, [filter, films])\r\n      \r\n      \r\n       \r\n    \r\n  \r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <Search\r\n        filter={filter}\r\n        setFilter={setFilter}\r\n        />\r\n        <div className='films__container'>\r\n          { searchedFilms.length\r\n          ? searchedFilms.map((film, index) => \r\n          <MemoFilmList \r\n            id={film.kinopoiskId}\r\n            key={film.kinopoiskId+index}\r\n            image={film.posterUrl}\r\n            name={film.nameRu}\r\n            countries={film['countries'][0]}\r\n            year={film.year}\r\n            >\r\n          </MemoFilmList> )\r\n            : <div className='failed__search'>\r\n                <h2>Фильмы не найдены!</h2>\r\n             </div>\r\n          }\r\n            \r\n        </div>\r\n        <div \r\n        ref={lastElement}>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export const MemoMainPage = React.memo(MainPage);"]},"metadata":{},"sourceType":"module"}