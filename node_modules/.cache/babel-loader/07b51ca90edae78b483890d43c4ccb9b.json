{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\IT\\\\myProjects\\\\filmpro\\\\src\\\\App.js\";\nimport { Button, Input, InputAdornment, InputBase, InputLabel } from '@mui/material';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport PostService from './api/PostService';\nimport FilmList from './components/FilmsList';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport { useFetching } from './hooks/useFetching';\nimport { useObserver } from './hooks/useObserver';\nimport './style/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // const [films, setFilms] = useState([])\n  // const [page, setPage] = useState(1)\n  // const [totalPages, setTotalPages] = useState(3)\n  // const [search, setSearch] = useState()\n  // const [filter,setFilter] = useState('')\n  // const lastElement = useRef()\n  // const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\n  //   const posts = await PostService.getAll(page);\n  //     setFilms([...films, ...posts])\n  // })\n  // useEffect(() => {\n  //   fetchPosts();\n  //   }, [page])\n  //   const searchedFilms = useMemo(() => {\n  //     return [...films].filter(film => {\n  //       if(film.nameRu) {\n  //         return film.nameRu.toLowerCase().includes(filter)\n  //       }\n  //     })\n  //   }, [filter, films])\n  //   useObserver(lastElement, page < totalPages, isPostsLoading, () => {\n  //     if(films.length) {setPage(page+1)};\n  //   })\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/IT/myProjects/filmpro/src/App.js"],"names":["Button","Input","InputAdornment","InputBase","InputLabel","React","useEffect","useMemo","useRef","useState","BrowserRouter","PostService","FilmList","Header","Search","useFetching","useObserver","App"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,cAAxB,EAAwCC,SAAxC,EAAmDC,UAAnD,QAAqE,eAArE;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,OAAO,iBAAP;;;AAEA,SAASC,GAAT,GAAe;AAEb;AACA;AACA;AACA;AACA;AAGA;AAKA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA,sBACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KArDQA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import { Button, Input, InputAdornment, InputBase, InputLabel } from '@mui/material';\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { BrowserRouter } from 'react-router-dom';\nimport PostService from './api/PostService';\nimport FilmList from './components/FilmsList';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport { useFetching } from './hooks/useFetching';\nimport {useObserver} from './hooks/useObserver'\nimport './style/App.css'\n\nfunction App() {\n\n  // const [films, setFilms] = useState([])\n  // const [page, setPage] = useState(1)\n  // const [totalPages, setTotalPages] = useState(3)\n  // const [search, setSearch] = useState()\n  // const [filter,setFilter] = useState('')\n\n\n  // const lastElement = useRef()\n\n\n  \n\n  // const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\n \n  //   const posts = await PostService.getAll(page);\n  //     setFilms([...films, ...posts])\n\n  // })\n\n\n\n  // useEffect(() => {\n  //   fetchPosts();\n  //   }, [page])\n   \n  \n\n\n  //   const searchedFilms = useMemo(() => {\n      \n  //     return [...films].filter(film => {\n  //       if(film.nameRu) {\n  //         return film.nameRu.toLowerCase().includes(filter)\n  //       }\n  //     })\n\n  //   }, [filter, films])\n    \n    \n  \n  //   useObserver(lastElement, page < totalPages, isPostsLoading, () => {\n  //     if(films.length) {setPage(page+1)};\n  //   })\n    \n\n  return (\n    <BrowserRouter>\n      \n    </BrowserRouter>\n      \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}