{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\IT\\\\myProjects\\\\filmpro\\\\src\\\\pages\\\\MainPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Input, InputAdornment, InputBase, InputLabel } from '@mui/material';\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BrowserRouter, Router } from 'react-router-dom';\nimport PostService from '../api/PostService';\nimport FilmList from '../components/FilmsList';\nimport Header from '../components/Header';\nimport Search from '../components/Search';\nimport { ArrContext } from '../context';\nimport { useFetching } from '../hooks/useFetching';\nimport { useObserver } from '../hooks/useObserver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainPage() {\n  _s();\n\n  const {\n    films,\n    setFilms\n  } = useContext(ArrContext);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(10);\n  const [search, setSearch] = useState();\n  const [filter, setFilter] = useState('');\n  const lastElement = useRef();\n  const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\n    const posts = await PostService.getAll(page);\n    setFilms([...films, ...posts]);\n  });\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n  const searchedFilms = useMemo(() => {\n    return [...films].filter(film => {\n      if (film.nameRu) {\n        return film.nameRu.toLowerCase().includes(filter);\n      }\n    });\n  }, [filter, films]);\n  useObserver(lastElement, page < totalPages, isPostsLoading, () => {\n    if (films.length) {\n      setPage(page + 1);\n    }\n\n    ;\n  });\n  console.log(searchedFilms);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"films__container\",\n      children: searchedFilms.length ? films.map((film, index) => /*#__PURE__*/_jsxDEV(FilmList, {\n        index: films.forEach((el, index) => {\n          if (el.kinopoisk.Id == film.kinopoiskId) {}\n        }),\n        id: film.kinopoiskId,\n        image: film.posterUrl,\n        name: film.nameRu,\n        countries: film['countries'][0],\n        year: film.year\n      }, film.kinopoiskId + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"failed__search\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0424\\u0438\\u043B\\u044C\\u043C\\u044B \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lastElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MainPage, \"X7hujRRMdkeaQTBE4np4Ko9He1c=\", false, function () {\n  return [useFetching, useObserver];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/IT/myProjects/filmpro/src/pages/MainPage.jsx"],"names":["Button","Input","InputAdornment","InputBase","InputLabel","React","useContext","useEffect","useMemo","useRef","useState","BrowserRouter","Router","PostService","FilmList","Header","Search","ArrContext","useFetching","useObserver","MainPage","films","setFilms","page","setPage","totalPages","setTotalPages","search","setSearch","filter","setFilter","lastElement","fetchPosts","isPostsLoading","postError","posts","getAll","searchedFilms","film","nameRu","toLowerCase","includes","length","console","log","map","index","forEach","el","kinopoisk","Id","kinopoiskId","posterUrl","year"],"mappings":"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","sourcesContent":["import { Button, Input, InputAdornment, InputBase, InputLabel } from '@mui/material';\r\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { BrowserRouter, Router } from 'react-router-dom';\r\nimport PostService from '../api/PostService';\r\nimport FilmList from '../components/FilmsList';\r\nimport Header from '../components/Header';\r\nimport Search from '../components/Search';\r\nimport { ArrContext } from '../context';\r\nimport { useFetching } from '../hooks/useFetching';\r\nimport {useObserver} from '../hooks/useObserver'\r\n\r\n\r\nfunction MainPage() {\r\n\r\n    const {films, setFilms} = useContext(ArrContext)\r\n    const [page, setPage] = useState(1)\r\n    const [totalPages, setTotalPages] = useState(10)\r\n    const [search, setSearch] = useState()\r\n    const [filter,setFilter] = useState('')\r\n  \r\n  \r\n    const lastElement = useRef()\r\n  \r\n  \r\n    \r\n  \r\n    const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\r\n   \r\n      const posts = await PostService.getAll(page);\r\n        setFilms([...films, ...posts])\r\n  \r\n    })\r\n  \r\n  \r\n  \r\n    useEffect(() => {\r\n      fetchPosts();\r\n      }, [page])\r\n     \r\n    \r\n  \r\n  \r\n      const searchedFilms = useMemo(() => {\r\n        \r\n        return [...films].filter(film => {\r\n          if(film.nameRu) {\r\n            return film.nameRu.toLowerCase().includes(filter)\r\n          }\r\n        })\r\n  \r\n      }, [filter, films])\r\n      \r\n      \r\n    \r\n      useObserver(lastElement, page < totalPages, isPostsLoading, () => {\r\n        if(films.length) {setPage(page+1)};\r\n      })\r\n      \r\n      console.log(searchedFilms)\r\n  \r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <Search\r\n        filter={filter}\r\n        setFilter={setFilter}\r\n        />\r\n        <div className='films__container'>\r\n          { searchedFilms.length\r\n          ? films.map((film, index) => \r\n          <FilmList \r\n            index = {films.forEach((el, index) => {\r\n              if(el.kinopoisk.Id == film.kinopoiskId) {\r\n\r\n              }\r\n            })}\r\n            id={film.kinopoiskId}\r\n            key={film.kinopoiskId+index}\r\n            image={film.posterUrl}\r\n            name={film.nameRu}\r\n            countries={film['countries'][0]}\r\n            year={film.year}\r\n            >\r\n          </FilmList> )\r\n            : <div className='failed__search'>\r\n                <h2>Фильмы не найдены!</h2>\r\n             </div>\r\n          }\r\n            \r\n        </div>\r\n        <div \r\n        ref={lastElement}>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default MainPage;"]},"metadata":{},"sourceType":"module"}